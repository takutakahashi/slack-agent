// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=internal/usecase/interfaces.go -destination=internal/mocks/usecase_mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/takutakahashi/slack-agent/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockSlackRepository is a mock of SlackRepository interface.
type MockSlackRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSlackRepositoryMockRecorder
	isgomock struct{}
}

// MockSlackRepositoryMockRecorder is the mock recorder for MockSlackRepository.
type MockSlackRepositoryMockRecorder struct {
	mock *MockSlackRepository
}

// NewMockSlackRepository creates a new mock instance.
func NewMockSlackRepository(ctrl *gomock.Controller) *MockSlackRepository {
	mock := &MockSlackRepository{ctrl: ctrl}
	mock.recorder = &MockSlackRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSlackRepository) EXPECT() *MockSlackRepositoryMockRecorder {
	return m.recorder
}

// GetBotUserID mocks base method.
func (m *MockSlackRepository) GetBotUserID(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBotUserID", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBotUserID indicates an expected call of GetBotUserID.
func (mr *MockSlackRepositoryMockRecorder) GetBotUserID(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBotUserID", reflect.TypeOf((*MockSlackRepository)(nil).GetBotUserID), ctx)
}

// PostMessage mocks base method.
func (m *MockSlackRepository) PostMessage(ctx context.Context, channelID, text, threadTS string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostMessage", ctx, channelID, text, threadTS)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostMessage indicates an expected call of PostMessage.
func (mr *MockSlackRepositoryMockRecorder) PostMessage(ctx, channelID, text, threadTS any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostMessage", reflect.TypeOf((*MockSlackRepository)(nil).PostMessage), ctx, channelID, text, threadTS)
}

// MockAgentRepository is a mock of AgentRepository interface.
type MockAgentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAgentRepositoryMockRecorder
	isgomock struct{}
}

// MockAgentRepositoryMockRecorder is the mock recorder for MockAgentRepository.
type MockAgentRepositoryMockRecorder struct {
	mock *MockAgentRepository
}

// NewMockAgentRepository creates a new mock instance.
func NewMockAgentRepository(ctrl *gomock.Controller) *MockAgentRepository {
	mock := &MockAgentRepository{ctrl: ctrl}
	mock.recorder = &MockAgentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentRepository) EXPECT() *MockAgentRepositoryMockRecorder {
	return m.recorder
}

// GenerateResponse mocks base method.
func (m *MockAgentRepository) GenerateResponse(ctx context.Context, prompt string) (*domain.AgentResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateResponse", ctx, prompt)
	ret0, _ := ret[0].(*domain.AgentResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateResponse indicates an expected call of GenerateResponse.
func (mr *MockAgentRepositoryMockRecorder) GenerateResponse(ctx, prompt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateResponse", reflect.TypeOf((*MockAgentRepository)(nil).GenerateResponse), ctx, prompt)
}

// MockMessageHandler is a mock of MessageHandler interface.
type MockMessageHandler struct {
	ctrl     *gomock.Controller
	recorder *MockMessageHandlerMockRecorder
	isgomock struct{}
}

// MockMessageHandlerMockRecorder is the mock recorder for MockMessageHandler.
type MockMessageHandlerMockRecorder struct {
	mock *MockMessageHandler
}

// NewMockMessageHandler creates a new mock instance.
func NewMockMessageHandler(ctrl *gomock.Controller) *MockMessageHandler {
	mock := &MockMessageHandler{ctrl: ctrl}
	mock.recorder = &MockMessageHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageHandler) EXPECT() *MockMessageHandlerMockRecorder {
	return m.recorder
}

// HandleMessage mocks base method.
func (m *MockMessageHandler) HandleMessage(ctx context.Context, message *domain.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleMessage", ctx, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleMessage indicates an expected call of HandleMessage.
func (mr *MockMessageHandlerMockRecorder) HandleMessage(ctx, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleMessage", reflect.TypeOf((*MockMessageHandler)(nil).HandleMessage), ctx, message)
}
